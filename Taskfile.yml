version: '3'

includes:
  examples: Task.examples.yml

vars:
  PYTHON:
    sh: "command -v python3.13 || command -v python3.12 || command -v python3"
  VENV_DIR: .venv
  REQUIREMENTS: requirements.txt

tasks:
  venv:
    desc: Create Python virtual environment
    cmds:
      - "{{.PYTHON}} -m venv {{.VENV_DIR}}"
      - |
        echo "Virtual environment created at {{.VENV_DIR}}"
        echo "Activate with: source {{.VENV_DIR}}/bin/activate"
    status:
      - test -d {{.VENV_DIR}}
      - test -x {{.VENV_DIR}}/bin/python3 || test -x {{.VENV_DIR}}/bin/python

  install:
    desc: Install dependencies in virtual environment
    deps: [venv]
    cmds:
      - |
        . {{.VENV_DIR}}/bin/activate
        pip install --upgrade pip
        pip install --upgrade -r {{.REQUIREMENTS}}
        touch {{.VENV_DIR}}/.requirements.stamp
    status:
      - test -f {{.VENV_DIR}}/.requirements.stamp
      - test {{.VENV_DIR}}/.requirements.stamp -nt {{.REQUIREMENTS}}

  dev-install:
    desc: Install development dependencies
    deps: [install]
    cmds:
      - |
        . {{.VENV_DIR}}/bin/activate
        pip install -e .

  clean:
    desc: Clean up virtual environment and cache files
    cmds:
      - |
        rm -rf {{.VENV_DIR}}
        find . -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
        find . -type f -name "*.pyc" -delete 2>/dev/null || true
        rm -rf *.egg-info build dist

  test:
    desc: Run tests
    deps: [install]
    cmds:
      - |
        . {{.VENV_DIR}}/bin/activate
        python -m pytest tests/ -v

  lint:
    desc: Run code linting
    deps: [install]
    cmds:
      - |
        . {{.VENV_DIR}}/bin/activate
        printf '%s\n' "Running black code formatter check..."
        black --check microflow/
        printf '%s\n' "Running flake8 linter..."
        flake8 microflow/
        printf '%s\n' "Running mypy type checker..."
        mypy microflow/

  format:
    desc: Format code
    deps: [install]
    cmds:
      - |
        . {{.VENV_DIR}}/bin/activate
        printf '%s\n' "Formatting code with black..."
        black microflow/

  run:
    desc: Run the microflow API server
    deps: [install]
    cmds:
      - |
        . {{.VENV_DIR}}/bin/activate
        if python -c "import importlib.util, sys; sys.exit(0 if importlib.util.find_spec('microflow.api') else 1)"
        then
          python -m microflow.api
        else
          printf '%s\n' "microflow.api module not found. Skipping API server run."
        fi

  check:
    desc: Run all checks (lint + test)
    deps: [install]
    cmds:
      - task: lint
      - task: test

  setup:
    desc: Complete project setup
    cmds:
      - task: venv
      - task: install
      - |
        printf '%s\n' "âœ… Setup complete!"
        printf '%s\n' "ðŸ“‹ Available commands:"
        printf '%s\n' "  task examples:basic - Run basic example"
        printf '%s\n' "  task examples:all   - Run all examples"
        printf '%s\n' "  task lint          - Check code quality"
        printf '%s\n' "  task test          - Run tests"
        printf '%s\n' "  task format        - Format code"
        
  codex-review:
    desc: Run Codex code review on the codebase
    deps: [install]
    cmds:
      - |
        . {{.VENV_DIR}}/bin/activate
        if command -v codex >/dev/null 2>&1; then
          printf '%s\n' "Running Codex code review..."
          codex --sandbox read-only exec "Review this Python project for potential issues and improvements."
        else
          printf '%s\n' "Codex CLI not found; skipping codex-review task."
        fi
